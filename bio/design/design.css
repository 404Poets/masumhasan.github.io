/* Minification failed. Returning unminified contents.
(143,1): run-time error CSS1019: Unexpected token, found '<'
(143,2): run-time error CSS1019: Unexpected token, found '?'
(143,14): run-time error CSS1031: Expected selector, found '='
(143,14): run-time error CSS1025: Expected comma or open brace, found '='
(157,59): run-time error CSS1031: Expected selector, found ';'
(157,59): run-time error CSS1025: Expected comma or open brace, found ';'
(157,60): run-time error CSS1019: Unexpected token, found '<'
(157,61): run-time error CSS1019: Unexpected token, found '/'
(158,9): run-time error CSS1031: Expected selector, found '<'
(158,9): run-time error CSS1025: Expected comma or open brace, found '<'
(220,7): run-time error CSS1019: Unexpected token, found '<'
(220,8): run-time error CSS1019: Unexpected token, found '/'
(221,7): run-time error CSS1031: Expected selector, found '<'
(221,7): run-time error CSS1025: Expected comma or open brace, found '<'
 */
/*
@font-face {
  font-family: "Lusitana";
  src: url("../fonts/Lusitana/Lusitana-Regular-webfont.ttf") format("truetype");
  font-style: normal;
  font-weight: normal;
}
@font-face {
  font-family: "LusitanaBold";
  src: url("../fonts/Lusitana/Lusitana-Bold-webfont.ttf") format("truetype");
  font-style: normal;
  font-weight: normal;
}
*/
@font-face {
    font-family: "Lusitana";
    src: url("../fonts/Lusitana/Lusitana-Regular-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}
@font-face {
    font-family: "LusitanaBold";
    src: url("../fonts/Lusitana/Lusitana-Bold-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}
@font-face {
    font-family: "LusitanaSemiBold";
    src: url("../fonts/Lusitana/Lusitana-SemiBold-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}
@font-face {
    font-family: "LusitanaItalic";
    src: url("../fonts/Lusitana/Lusitana-Italic-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}
@font-face {
    font-family: "LusitanaItalicBold";
    src: url("../fonts/Lusitana/Lusitana-BoldItalic-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}
@font-face {
    font-family: "LusitanaItalicSemiBold";
    src: url("../fonts/Lusitana/Lusitana-SemiBoldItalic-OTF.ttf") format("opentype");
    font-style: normal;
    font-weight: normal;
}




@font-face {
  font-family: 'gatesnotes-icons-2019';
  src: url('../fonts/gatesnotes-icons-2019.eot?77849758');
  src: url('../fonts/gatesnotes-icons-2019.eot?77849758#iefix') format('embedded-opentype'),
       url('../fonts/gatesnotes-icons-2019.woff2?77849758') format('woff2'),
       url('../fonts/gatesnotes-icons-2019.woff?77849758') format('woff'),
       url('../fonts/gatesnotes-icons-2019.ttf?77849758') format('truetype'),
       url('../fonts/gatesnotes-icons-2019.svg?77849758#gatesnotes-icons-2019') format('svg');
  font-weight: normal;
  font-style: normal;
}
/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */
/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */
/*
@media screen and (-webkit-min-device-pixel-ratio:0) {
  @font-face {
    font-family: 'gatesnotes-icons-2019';
    src: url('../fonts/gatesnotes-icons-2019.svg?77849758#gatesnotes-icons-2019') format('svg');
  }
}
*/
 
 [class^="icon-"]:before, [class*=" icon-"]:before {
  font-family: "gatesnotes-icons-2019";
  font-style: normal;
  font-weight: normal;
  speak: none;
  display: inline-block;
  text-decoration: inherit;
  width: 1em;
  text-align: center;
  font-variant: normal;
  text-transform: none;
  line-height: 1em;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
 
.icon-article-thumbnail-bookmark-outline:before { content: '\e800'; } /* '' */
.icon-article-thumbnail-bookmark:before { content: '\e801'; } /* '' */
.icon-book-outline:before { content: '\e802'; } /* '' */
.icon-bookmark-outline:before { content: '\e803'; } /* '' */
.icon-bookmark:before { content: '\e804'; } /* '' */
.icon-check-mark:before { content: '\e805'; } /* '' */
.icon-clock:before { content: '\e806'; } /* '' */
.icon-close-x:before { content: '\e807'; } /* '' */
.icon-comment-outline:before { content: '\e808'; } /* '' */
.icon-comment:before { content: '\e809'; } /* '' */
.icon-conversation:before { content: '\e80a'; } /* '' */
.icon-dot:before { content: '\e80b'; } /* '' */
.icon-down-arrow:before { content: '\e80c'; } /* '' */
.icon-download:before { content: '\e80d'; } /* '' */
.icon-drop-down:before { content: '\e80e'; } /* '' */
.icon-edit-cover:before { content: '\e80f'; } /* '' */
.icon-edit-profile:before { content: '\e810'; } /* '' */
.icon-edit:before { content: '\e811'; } /* '' */
.icon-exclamation:before { content: '\e812'; } /* '' */
.icon-gallery:before { content: '\e814'; } /* '' */
.icon-gift:before { content: '\e815'; } /* '' */
.icon-instagram:before { content: '\e817'; } /* '' */
.icon-left-arrow:before { content: '\e818'; } /* '' */
.icon-left-point-arrow:before { content: '\e819'; } /* '' */
.icon-like-heart-selected:before { content: '\e81a'; } /* '' */
.icon-like-heart-unselected:before { content: '\e81b'; } /* '' */
.icon-link:before { content: '\e81c'; } /* '' */
.icon-linkedin:before { content: '\e81d'; } /* '' */
.icon-loading:before { content: '\e81e'; } /* '' */
.icon-lock:before { content: '\e81f'; } /* '' */
.icon-mail:before { content: '\e820'; } /* '' */
.icon-pause:before { content: '\e821'; } /* '' */
.icon-play:before { content: '\e822'; } /* '' */
.icon-plus:before { content: '\e823'; } /* '' */
.icon-profile:before { content: '\e824'; } /* '' */
.icon-reply:before { content: '\e825'; } /* '' */
.icon-right-arrow:before { content: '\e826'; } /* '' */
.icon-right-point-arrow:before { content: '\e827'; } /* '' */
.icon-rss:before { content: '\e828'; } /* '' */
.icon-search:before { content: '\e829'; } /* '' */
.icon-section-break:before { content: '\e82a'; } /* '' */
.icon-settings:before { content: '\e82b'; } /* '' */
.icon-share:before { content: '\e82c'; } /* '' */
.icon-translate-icon:before { content: '\e82d'; } /* '' */
.icon-twitter:before { content: '\e82e'; } /* '' */
.icon-up-arrow:before { content: '\e82f'; } /* '' */
.icon-video-outline:before { content: '\e830'; } /* '' */
.icon-youtube:before { content: '\e831'; } /* '' */
.icon-hamburger-menu-3:before { content: '\e832'; } /* '' */
.icon-facebook:before { content: '\e833'; } /* '' */
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:variable name="url" select="'red'" />

  <xsl:template match="/">
    <html>
      <head>
        <title><xsl:value-of select="/rss/channel/title" /></title>


      </head>
      
      <body onload="" style="font-family:'HelveticaNeueW01-45Ligh','Helvetica LT Std Light','Helvetica Neue LT Std',Helvetica;">
        <div id="cometestme" style="display:none;">
          <xsl:text disable-output-escaping="yes">&amp;amp;</xsl:text>
        </div>
        
        <div id="outer">
        


	<div class="heading">
		<p class="feednametitle" style="font-size:36px;color:#000;letter-spacing: -1.5px;font-weight: normal;font-style: normal;margin-top: 0px;margin-bottom: 10px;" id="feednametitle"><xsl:value-of select="/rss/channel/title" /></p>
		<h4 class="feednameinfo" style="font-size:18px;color:#666;font-weight: normal;font-style: normal;margin-top: 0px;margin-bottom: 10px;"><xsl:value-of select="/rss/channel/description" /><xsl:text></xsl:text></h4>
		<p class="builddate" style="font-size:14px;color:#666;font-weight: normal;font-style: normal;margin-top: 0px;"><xsl:value-of select="/rss/channel/lastBuildDate" /></p>
	</div><!-- end heading-->
        
    <div id="items">

            <xsl:for-each select="/rss/channel/item">
              <div class="item" style="border: 0px solid #fff;margin-bottom: 20px;border-bottom: 2px solid #ddd;display: block;max-width: 600px;padding-bottom: 10px;">
               <h3 class="header" style="margin-top: 0px;margin-bottom: 4px;" ><a style="font-size:26px !important;color:#000;letter-spacing: -1.5px;font-weight: normal;font-style: normal;margin-top: 0px;margin-bottom: 0px;color:#3379be;text-decoration: underline;" href="{link}"><xsl:value-of select="title" /></a></h3>
               <p class="pubdate" style="font-size:14px;color:#666;font-weight: normal;font-style: normal;margin-top: 0px;margin-bottom: 10px;"><xsl:value-of select="pubDate" /></p>
               <span style="font-size:18px;color:#000;font-weight: normal;font-style: normal;max-width: 600px;display: block;font-family: Lusitana,serif;"><xsl:value-of select="description" disable-output-escaping="yes" /></span>
			  </div><!-- end item (class) -->            
            </xsl:for-each>
            <p name="decodeable" class="itembody"></p>
    </div><!-- end items (ID) -->

</div>

    </body>
    </html>
  </xsl:template>

<xsl:output method="html"
            encoding="UTF-8"
            indent="no"/>


  
</xsl:stylesheet>
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    <html>
      <style>
        body {
        font-family: sans-serif;
        font-size: 10px;
        }
        table {
        font-family: sans-serif;
        font-size: 12px;
        border: 1px solid lightgray;
        border-spacing: 0px;
        }
        th {
        padding: 4px;
        }
        td {
        padding: 4px;
        padding-top: 2px;
        padding-bottom: 2px;
        border: 1px solid lightgray;
        max-width: 360px;
        }
      </style>
      <body>
        <h2>Existing Goodreads items: reading</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/existing_reading_items/reading">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="author"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>

        <h2>Existing Goodreads items: to read</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/existing_toread_items/toread">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="author"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>

        <h2>Existing Goodreads items: read</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/existing_read_items/read">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="author"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>

        <h2>Goodreads items from API: reading</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/apireading/GoodreadsResponse/reviews/review/book">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="authors/author/name"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>

        <h2>Goodreads items from API: to read</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/apitoread/GoodreadsResponse/reviews/review/book">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="authors/author/name"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>

        <h2>Goodreads items from API: read</h2>
        <table border="1">
          <tr bgcolor="#9acd32">
            <th style="text-align:left">Id</th>
            <th style="text-align:left">Title</th>
            <th style="text-align:left">Author</th>
          </tr>
          <xsl:for-each select="rss/channel/apiread/GoodreadsResponse/reviews/review/book">
            <tr>
              <td>
                <xsl:value-of select="id"/>
              </td>
              <td>
                <xsl:value-of select="title"/>
              </td>
              <td>
                <xsl:value-of select="authors/author/name"/>
              </td>
            </tr>
          </xsl:for-each>
        </table>
        
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>


/* Override the default bootstrap behavior where horizontal description lists 
   will truncate terms that are too long to fit in the left column 
*/
.dl-horizontal dt {
    white-space: normal;
}

/* Set width on the form input elements since they're 100% wide by default */
input,
select,
textarea {
    /*max-width: 280px;*/
}


a {
    user-select: text;
}

.TGN_site_ContentArea {
    max-width: 1160px;
    margin-left: auto;
    margin-right: auto;
}

.TGN_site_myProfileHeader {
    background: #f3f3f3;
    display: none;
    border-bottom: 1px solid #d3d3d3;
}

.TGN_site_FixedHeadersHolder {
    max-width: 1160px;
    margin-left: auto;
    margin-right: auto;
}

.TGN_site {
    background: white;
    z-index: -1;
    position: absolute;
    top: 0px;
    left: 0px;
    height: 100%;
    width: 100%;
    overflow-x: hidden;
    overflow-y: scroll !important;
}
.TGN_site_BioHolder {
    overflow: hidden;
    /*max-height: 7200px;*/
}

@media all and (max-width: 1020px) {
    /*Mobile only*/
    .TGN_site_BioHolder {
        /*max-height: 1080px;
        overflow-y: scroll;*/
    }
}

@media all and (max-width: 680px) {
    /*Mobile only*/
    .TGN_site_BioHolder {
        /*max-height: 430px;*/
    }
}
